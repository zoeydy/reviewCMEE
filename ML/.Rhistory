S = 1E7
if (S <= 0 | S >= 100000) {
S <- readline(prompt = "Sorry, the sum you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
S <- as.numeric(S)
}
It is supposed to be between 0 and 100000. \n
Please reinput: ")
S <- readline(prompt = "Sorry, the sum you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
S
S <- as.numeric(S)
S <- as.numeric(S)
if (S <= 0 | S >= 100000) {
S <- readline(prompt = "Sorry, the sum you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
S <- as.numeric(S)
}
S
# get the 2rd input, the size of the array
N <- readline(prompt = "Please input the size of the arrays: ")
N <- as.numeric(n)
N
N
# calculate
result <- (S-N(N-1)/2)/N
# get the 2rd input, the size of the array
N <- readline(prompt = "Please input the size of the arrays: ")
N <- as.numeric(n)
# check whether the input is legal
if (N <= 0 | N >= 100000) {
N <- readline(prompt = "Sorry, the size you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
N <- as.numeric(N)
}
# calculate
result <- (S-N(N-1)/2)/N
# calculate
result <- (S-N(N-1)/2)/N
N
N
class(N)
(S-N(N-1)/2)/N
# calculate
result <- (S-N*(N-1)/2) / N
result
S
N
N*(N-1)/2
S
(S-N*(N-1)/2)
N
is.integer(result)
result
round(result)
round(1.3)
is.integer(1.3)
is.integer(result)
result/floor(result)
1.3/floor(1.3)
is.integer(result/floor(result))
result == round(result)
1.3 == round(1.3)
result+N-1
write(result:(result+N-1))
write(result:(result+N-1), stdout())
write(-1, stdout())
# get the 1st input, the sum of the numbers
S <- readline(prompt = "Please input the sum of the numbers: ")
S <- as.numeric(S)
# check whether the input is legal
if (S <= 0 | S >= 100000) {
S <- readline(prompt = "Sorry, the sum you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
S <- as.numeric(S)
}
# get the 2rd input, the size of the array
N <- readline(prompt = "Please input the size of the arrays: ")
N <- as.numeric(n)
N <- as.numeric(N)
# check whether the input is legal
if (N <= 0 | N >= 100000) {
N <- readline(prompt = "Sorry, the size you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
N <- as.numeric(N)
}
# calculate
result <- (S-N*(N-1)/2) / N
# check whether the result is reasonable (integers)
if (result == round(result)) {
write(result:(result+N-1), stdout())
} else{
write(-1, stdout())
}
N
S
# get the 2rd input, the size of the array
N <- readline(prompt = "Please input the size of the arrays: ")
N <- as.numeric(N)
# check whether the input is legal
if (N <= 0 | N >= 100000) {
N <- readline(prompt = "Sorry, the size you input is illegal, \n
It is supposed to be between 0 and 100000. \n
Please reinput: ")
N <- as.numeric(N)
}
# calculate
result <- (S-N*(N-1)/2) / N
# check whether the result is reasonable (integers)
if (result == round(result)) {
write(result:(result+N-1), stdout())
} else{
write(-1, stdout())
}
result
pat <- "[1],[0]*,1]"
# ask for the information about the stall
stall <- as.character(readline(prompt = "Please input the information about the stall: "))
str_match_all(string = stall, pattern = pat)
# ask for the information about the stall
pat <- "[1]\,[0]*\,1]"
stall <- as.character(readline(prompt = "Please input the information about the stall: "))
pat <- "[1][,][0]*[,][1]"
stall <- as.character(readline(prompt = "Please input the information about the stall: "))
str_match_all(string = stall, pattern = pat)
# ask for the information about the stall
pat <- "[1][,]0*[,][1]"
str_match_all(string = stall, pattern = pat)
# ask for the information about the stall
pat <- "1[,]0*[,]1"
str_match_all(string = stall, pattern = pat)
# ask for the information about the stall
pat <- "1[,]0[,]1"
str_match_all(string = stall, pattern = pat)
# match the string match the required pattern
pat <- "*1[,]0[,]1"
str_match_all(string = stall, pattern = pat)
# match the string match the required pattern
pat <- "1[,]0+[,]1"
# match the string match the required pattern
pat <- "1[,]0+[,]1"
str_match_all(string = stall, pattern = pat)
# ask for the information about the stall
stall <- as.character(readline(prompt = "Please input the information about the stall: "))
# match the string match the required pattern
pat <- "1[,]0+[,]1"
str_match_all(string = stall, pattern = pat)
# match the string match the required pattern
pat <- "1[,][0]+[,]1"
str_match_all(string = stall, pattern = pat)
str_extract_all(string = stall, pattern = pat)
pat <- "[0]+"
str_extract_all(string = stall, pattern = pat)
unlist(str_extract_all(string = stall, pattern = pat))
length(unlist(str_extract_all(string = stall, pattern = pat)))
result <- length(unlist(str_extract_all(string = stall, pattern = pat)))/2
result
result <-
floor(length(unlist(str_extract_all(string = stall, pattern = pat)))/2)
result
write(result, stdout())
sum(8,10,6,5,10)
sum(10,6,9,7,6)
sum(9,10,6,7,5)
sum(9,10,8,4,9)
# ask for the number of participants
input <- as.character(readline(prompt = "Please input the number ofjudges and participants (seperated by comma): "))
input
str_extract_all(input, pattern = "[0-9]")
unlist(str_extract_all(input, pattern = "[0-9]"))
unlist(str_extract_all(input, pattern = "[0-9]"))[1]
as.numeric(unlist(str_extract_all(input, pattern = "[0-9]")))
input <- as.numeric(unlist(str_extract_all(input, pattern = "[0-9]")))
M <- input[1]
N <- input[2]
M
N
write(-1, stdout())
marks <- list()
readline(prompt = paste0("Please input the marks from the judge No.", i))
M
for (i in 1:M) {
marks[[i]] <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i)))
}
marks
as.table(marks)
table(marks)
marks
table(marks)
matrix(marks)
marks[i]
str_extract_all(string = marks[i], pattern = pat1)
pat1 <- "[0-9][0-9]+"
str_extract_all(string = marks[i], pattern = pat1)
pat1 <- "[0-9]+"
str_extract_all(string = marks[i], pattern = pat1)
length(str_extract_all(string = marks[i], pattern = pat1))
length(unlist(str_extract_all(string = marks[i], pattern = pat1)))
length(unlist(str_extract_all(string = marks[i], pattern = pat1))) != N
mark <- unlist(str_extract_all(string = marks[i], pattern = pat1))
mark
mark <- as.numeric(mark)
mark
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
}
length(mark)
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark
mark <- unlist(str_extract_all(string = marks[i], pattern = pat1))
mark <- as.numeric(mark)
mark
length(mark)
length(mark) != N
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = marks[i], pattern = pat1))
mark <- as.numeric(mark)
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
marks
marks <- list()
pat1 <- "[0-9]+"
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = marks[i], pattern = pat1))
mark <- as.numeric(mark)
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
marks
# ask for the information about the marks gotten
marks <- list()
pat1 <- "[0-9]+"
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = mark, pattern = pat1))
mark <- as.numeric(mark)
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
marks
matrix(marks)
table(marks)
as.data.frame(marks)
mark
table(mark)
table(mark, deparse.level = TRUE)
table(mark)
list(table(mark))
library(dplyr)
arrange(as.data.frame(marks))
df <- as.data.frame(marks)
sum(df)
sum(df[,:]
sum(df[1:M,:]
sum(df[1:M,]
)
df[1:M,]
colSums(df)
df
rolSums(df)
rowSums(df)
df$sum <- rowSums(df)
df
arrange(df, df$sum)
df$No. <- 1:N
df
arrange(df, df$sum)
arrange(df, df$sum)[-3:-1]
arrange(df, df$sum)$No.[-3:-1]
arrange(df, df$sum)$No.[-1:-3]
arrange(df, df$sum)$No.[-1:-4]
arrange(df, df$sum)$No.
result <- arrange(df, df$sum)$No.
result
result[N-3:N]
result[3:5]
N-3
result[N-2:N]
result[3:5]
result[N-2:N]
result
No_order <- arrange(df, df$sum)$No.
No_order
words <- as.character(readline(prompt = "Words: "))
library("sringr")
library(sringr)
library(stringr)
words_split <- unlist(strsplit(words, split = " "))
weights <- c()
for (i in 1:length(words_split)) {
weight <- nchara(words_split[i])
weights <- c(weights, weight)
}
weight <- nchar(words_split[i])
weights <- c()
for (i in 1:length(words_split)) {
weight <- nchar(words_split[i])
weights <- c(weights, weight)
}
result <- sum(weights) / length(words_split)
result <- format(round(result, 2), nsmall = 2)
write(result, stdout())
install.package("stringr")
words <- as.character(readline(prompt = "Words: "))
# install.packages("stringr")
# library(stringr)
words_split <- unlist(strsplit(words, split = " "))
weights <- c()
for (i in 1:length(words_split)) {
weight <- nchar(words_split[i])
weights <- c(weights, weight)
}
result <- sum(weights) / length(words_split)
result <- format(round(result, 2), nsmall = 2)
write(result, stdout())
result
No_order
No_order
# ask for the number of participants
input <- as.character(readline(prompt = "Please input the number ofjudges and participants (seperated by comma): "))
input <- as.numeric(unlist(str_extract_all(input, pattern = "[0-9]")))
library(stringr)
input <- as.numeric(unlist(str_extract_all(input, pattern = "[0-9]")))
M <- input[1]
N <- input[2]
# check whether the input is legal, if so calculate and return the result
if (M < 3  | M >10 | N <3 | N>100) {
write(-1, stdout())
} else{
# ask for the information about the marks gotten
marks <- list()
pat1 <- "[0-9]+"
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = mark, pattern = pat1))
mark <- as.numeric(mark)
table(mark)
list(table(mark))
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
library(dplyr)
df <- as.data.frame(marks)
df$sum <- rowSums(df)
df$No. <- 1:N
No_order <- arrange(df, df$sum)$No.
rev(No_order)
}
No_order
rev(No_order)[1:3]
write(result, stdout())
# check whether the input is legal, if so calculate and return the result
if (M < 3  | M >10 | N <3 | N>100) {
write(-1, stdout())
} else{
# ask for the information about the marks gotten
marks <- list()
pat1 <- "[0-9]+"
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = mark, pattern = pat1))
mark <- as.numeric(mark)
table(mark)
list(table(mark))
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
library(dplyr)
df <- as.data.frame(marks)
df$sum <- rowSums(df)
df$No. <- 1:N
No_order <- arrange(df, df$sum)$No.
result <- rev(No_order)[1:3]
}
write(result, stdout())
paste(rev(No_order)[1:3], collapse = ",")
result <- paste(rev(No_order)[1:3], collapse = ",")
# check whether the input is legal, if so calculate and return the result
if (M < 3  | M >10 | N <3 | N>100) {
write(-1, stdout())
} else{
# ask for the information about the marks gotten
marks <- list()
pat1 <- "[0-9]+"
for (i in 1:M) {
mark <- as.character(readline(prompt = paste0("Please input the marks from the judge No.", i, ": ")))
mark <- unlist(str_extract_all(string = mark, pattern = pat1))
mark <- as.numeric(mark)
table(mark)
list(table(mark))
# check whether the input is legal
if (length(mark) != N) {
write(-1, stdout())
} else{
marks[[i]] <- mark
}
}
library(dplyr)
df <- as.data.frame(marks)
df$sum <- rowSums(df)
df$No. <- 1:N
No_order <- arrange(df, df$sum)$No.
result <- paste(rev(No_order)[1:3], collapse = ",")
}
mark
length(mark)
N
# 17. 删除字符串中字符最少的字符
input <- readline(prompt = "Please input the string: ")
input
count(input, letters)
count(input, 'letters'a)
count(input, 'a')
count(abcdd, 'a')
input <- readline(prompt = "input the sentence: ")
count(input, 'a')
ln(-3+10^(1/2))
log(-3+10^(1/2))
log10(-3+10^(1/2))
rm(list = ls())
setwd("~/reviewCMEE/ML")
library(mvtnorm)
# generate the data
set.seed(123)
covariance <- matrix(
c(5,3,0,-3,0,3,5,0,-3,0, 0,0,5,0,0,-3,-3,0,6,0, 0,0,0,0,3),
nrow = 5)
data <- rmvnorm(1000, sigma=covariance)
names(data)<- c("a", "b", "c", "d", "e")
# run the analysis
pca <- prcomp(data)
biplot(pca)
biplot(pca, choices=2:3)
pca
plot(pca$x[,2] ~ data[,3], xlab="'c' variable", ylab="PC2")
plot(pca$x[,2] ~ data[,3], xlab="'c' variable", ylab="PC2")
plot(pca)
summary(pca)
# scale your data
pca <- prcomp(data, scale = TRUE)
plot(pca)
summary(pca)
biplot(pca)
rm(list = ls())
# draw species' parameters
intercepts <- rnorm(20, mean = 20)
env1 <- rnorm(20)
env2 <- rnorm(20)
env1
seq((-3,3,.5))
seq(-3,3,.5)
# create environment
env <- expand.grid(env1=seq(-3,3,.5), env2=seq(-3,3,.5))
env
biomass <- matrix(ncol = 20, nrow = nrow(env))
biomass
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
for (i in seq_len(nrow(biomass))) {
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
}
biomass
# PCoA
library(vegan)
install.packages(vegan)
install.packages("vegan")
# PCoA
library(vegan)
pcoa <- cmdscale(dist, eig = TRUE)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig = TRUE)
barplot(pcoa$eig)
env
intercepts
env1
dist
# plot
plot(pcoa$points[,1:2], xlab = "PCoA1", ylab = "PCoA2")
pcoa
plot(pcoa$points[,1:2], type = "n", xlab = "PCoA1", ylab = "PCoA2")
text(pcoa$points[,1:2]+.25, labels = env[,1], col = "red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
